import { readFileSync } from 'fs';
import { _getDependenciesFromScripts } from '../../binaries/index.js';
import { getGitHookPaths } from '../../util/git.js';
import { getValuesByKeyDeep } from '../../util/object.js';
import { timerify } from '../../util/Performance.js';
import { hasDependency, load } from '../../util/plugin.js';
import { fromBinary } from '../../util/protocols.js';
export const NAME = 'Lefthook';
export const ENABLERS = ['lefthook', '@arkweid/lefthook', '@evilmartians/lefthook'];
export const isEnabled = ({ dependencies }) => hasDependency(dependencies, ENABLERS);
const gitHookPaths = getGitHookPaths();
export const CONFIG_FILE_PATTERNS = ['lefthook.yml', ...gitHookPaths];
const findLefthookDependencies = async (configFilePath, { cwd, manifest, isProduction }) => {
    if (isProduction)
        return [];
    const dependencies = manifest.devDependencies ? Object.keys(manifest.devDependencies) : [];
    if (configFilePath.endsWith('.yml')) {
        const config = await load(configFilePath);
        if (!config)
            return [];
        const scripts = getValuesByKeyDeep(config, 'run').filter((value) => typeof value === 'string');
        const lefthook = process.env.CI ? ENABLERS.filter(dependency => dependencies.includes(dependency)) : [];
        return [...lefthook, ..._getDependenciesFromScripts(scripts, { cwd, manifest, knownGlobalsOnly: true })];
    }
    const script = readFileSync(configFilePath, 'utf8');
    const scriptDependencies = _getDependenciesFromScripts([script], { cwd, manifest, knownGlobalsOnly: false });
    const matches = scriptDependencies.find(dep => dependencies.includes(fromBinary(dep)));
    return matches ? [matches] : [];
};
export const findDependencies = timerify(findLefthookDependencies);
