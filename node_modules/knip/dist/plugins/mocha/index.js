import { timerify } from '../../util/Performance.js';
import { hasDependency, load } from '../../util/plugin.js';
import { toEntryPattern } from '../../util/protocols.js';
export const NAME = 'Mocha';
export const ENABLERS = ['mocha'];
export const isEnabled = ({ dependencies }) => hasDependency(dependencies, ENABLERS);
export const CONFIG_FILE_PATTERNS = ['.mocharc.{js,cjs,json,jsonc,yml,yaml}', 'package.json'];
export const ENTRY_FILE_PATTERNS = ['**/test/*.{js,cjs,mjs}'];
const findMochaDependencies = async (configFilePath, { manifest, isProduction }) => {
    const entryPatterns = ENTRY_FILE_PATTERNS.map(toEntryPattern);
    if (isProduction)
        return entryPatterns;
    const config = configFilePath.endsWith('package.json') ? manifest.mocha : await load(configFilePath);
    if (!config)
        return [];
    const require = config.require ? [config.require].flat() : [];
    return [...require, ...entryPatterns];
};
export const findDependencies = timerify(findMochaDependencies);
