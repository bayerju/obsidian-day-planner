import type { Configuration, PluginName, WorkspaceConfiguration } from './types/config.js';
import type { PackageJsonWithPlugins } from './types/plugins.js';
import type { InstalledBinaries, HostDependencies } from './types/workspace.js';
type WorkspaceManagerOptions = {
    name: string;
    dir: string;
    cwd: string;
    config: WorkspaceConfiguration;
    manifest: PackageJsonWithPlugins;
    rootIgnore: Configuration['ignore'];
    negatedWorkspacePatterns: string[];
    enabledPluginsInAncestors: string[];
    isProduction: boolean;
    isStrict: boolean;
};
type ReferencedDependencies = Set<[string, string]>;
export declare class WorkspaceWorker {
    name: string;
    dir: string;
    cwd: string;
    config: WorkspaceConfiguration;
    manifest: PackageJsonWithPlugins;
    isProduction: boolean;
    isStrict: boolean;
    rootIgnore: Configuration['ignore'];
    negatedWorkspacePatterns: string[];
    enabledPluginsInAncestors: string[];
    enabled: Record<PluginName, boolean>;
    enabledPlugins: PluginName[];
    referencedDependencies: ReferencedDependencies;
    hostDependencies: HostDependencies;
    installedBinaries: InstalledBinaries;
    hasTypesIncluded: Set<string>;
    entryFilePatterns: Set<string>;
    productionEntryFilePatterns: Set<string>;
    constructor({ name, dir, cwd, config, manifest, isProduction, isStrict, rootIgnore, negatedWorkspacePatterns, enabledPluginsInAncestors, }: WorkspaceManagerOptions);
    init(): Promise<void>;
    private setEnabledPlugins;
    private initReferencedDependencies;
    private getConfigForPlugin;
    getEntryFilePatterns(): string[];
    getProjectFilePatterns(testFilePatterns: string[]): string[];
    getPluginProjectFilePatterns(): string[];
    getPluginConfigPatterns(): string[];
    getProductionEntryFilePatterns(negatedTestFilePatterns: string[]): string[];
    getProductionProjectFilePatterns(negatedTestFilePatterns: string[]): string[];
    private getConfigurationFilePatterns;
    getIgnorePatterns(): string[];
    private findDependenciesByPlugins;
    findAllDependencies(): Promise<{
        hostDependencies: HostDependencies;
        installedBinaries: InstalledBinaries;
        referencedDependencies: ReferencedDependencies;
        hasTypesIncluded: Set<string>;
        enabledPlugins: ("angular" | "ava" | "babel" | "capacitor" | "changesets" | "commitizen" | "commitlint" | "cspell" | "cypress" | "eslint" | "gatsby" | "husky" | "jest" | "lefthook" | "markdownlint" | "mocha" | "next" | "nx" | "nyc" | "playwright" | "postcss" | "prettier" | "remark" | "remix" | "rollup" | "sentry" | "storybook" | "stryker" | "stylelint" | "tailwind" | "typedoc" | "typescript" | "vite" | "vitest" | "webpack" | "drizzle" | "githubActions" | "lintStaged" | "nodeTestRunner" | "npmPackageJsonLint" | "playwrightCt" | "releaseIt" | "semanticRelease" | "svelte")[];
        entryFilePatterns: string[];
        productionEntryFilePatterns: string[];
    }>;
}
export {};
