import { dirname, join, relative } from '../../util/path.js';
import { timerify } from '../../util/Performance.js';
import { hasDependency, load } from '../../util/plugin.js';
import { toEntryPattern } from '../../util/protocols.js';
export const NAME = 'Playwright';
export const ENABLERS = ['@playwright/test'];
export const isEnabled = ({ dependencies }) => hasDependency(dependencies, ENABLERS);
export const ENTRY_FILE_PATTERNS = ['**/*.@(spec|test).?(c|m)[jt]s?(x)'];
export const CONFIG_FILE_PATTERNS = ['playwright.config.{js,ts}'];
const toEntryPatterns = (testMatch, cwd, configFilePath, config) => {
    if (!testMatch)
        return [];
    const dir = relative(cwd, config.testDir ? join(dirname(configFilePath), config.testDir) : dirname(configFilePath));
    const patterns = [testMatch].flat().filter((p) => typeof p === 'string');
    return patterns.map(pattern => toEntryPattern(join(dir, pattern)));
};
const findPlaywrightDependencies = async (configFilePath, { cwd }) => {
    const config = await load(configFilePath);
    const projects = config.projects ? [config, ...config.projects] : [config];
    const patterns = projects.flatMap(config => toEntryPatterns(config.testMatch, cwd, configFilePath, config));
    if (patterns.length > 0)
        return patterns;
    return toEntryPatterns(ENTRY_FILE_PATTERNS, cwd, configFilePath, config);
};
export const findDependencies = timerify(findPlaywrightDependencies);
